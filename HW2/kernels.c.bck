/********************************************************
 * Kernels to be optimized for the CS:APP Performance Lab
 ********************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "defs.h"
#include <time.h>
#include <math.h>

/* 
 * ECE454 Students: 
 * Please fill in the following team struct 
 */
team_t team = {
    "Akatsuki: The Brotherhood",              /* Team name */

    "Rushab Ramesh Kumar",     /* First member full name */
    "rushab.kumar@mail.utoronto.ca",  /* First member email address */

    "Ismail Hossain",                   /* Second member full name (leave blank if none) */
    "ridoy.hosssain@mail.utoronto.ca"                    /* Second member email addr (leave blank if none) */
};

/***************
 * ROTATE KERNEL
 ***************/

/******************************************************
 * Your different versions of the rotate kernel go here
 ******************************************************/

/* 
 * naive_rotate - The naive baseline version of rotate 
 */
char naive_rotate_descr[] = "naive_rotate: Naive baseline implementation";
void naive_rotate(int dim, pixel *src, pixel *dst) 
{
    clock_t begin;

    /* Mark beginning time */
    begin = clock();

    printf("dIM %d \n", dim);
    int i, j;

    for (i = 0; i < dim; i++)
	for (j = 0; j < dim; j++)
	    dst[RIDX(dim-1-j, i, dim)] = src[RIDX(i, j, dim)];

    printf ("time spent: %lf \n", (double)(clock() - begin) * 1000 / CLOCKS_PER_SEC);
}

/*
 * ECE 454 Students: Write your rotate functions here:
 */ 

/* 
 * rotate - Your current working version of rotate
 * IMPORTANT: This is the version you will be graded on
 */
char rotate_descr[] = "rotate: Current working version";
void rotate(int dim, pixel *src, pixel *dst) 
{
    naive_rotate(dim, src, dst);
}


/* 
 * tiling attempt (commented out for now)
 */
char rotate_two_descr[] = "tiling attempt";
void attempt_two(int dim, pixel *src, pixel *dst) 
{
    //clock_t begin;

    /* Mark beginning time */
    //begin = clock();

    //printf("dIM %d \n", dim);

    int N = 32;
    int i, j, bi, bj;

    for (j = 0; j < dim; j += N)
    {
        for (i = 0; i < dim; i += N)
        {
            //printf("In block %d,%d \n", i, j);
            for (bj = j; bj < j + N; bj++)
            {
                for (bi = i; bi < i + N; bi++)
                {
                    dst[RIDX(dim-1-bj, bi, dim)] = src[RIDX(bi, bj, dim)];
                }
            }
        }
    }

    //printf ("time spent: %lf \n", (double)(clock() - begin) * 1000 / CLOCKS_PER_SEC);
}

/* 
 * tiling attempt (commented out for now)
 */
char rotate_three_descr[] = "less loop tiling attempt";
void attempt_three(int dim, pixel *src, pixel *dst) 
{
    //clock_t begin;

    /* Mark beginning time */
    //begin = clock();

    //printf("dIM %d \n", dim);

    int N = 16;
    int k, bi, bj, i = 0, j = 0;

    int num_blocks = pow(dim / N, 2);

    for (k = 0; k < num_blocks; k++)
    {
        //printf("doing block %d of %d: i = %d , j = %d \n", k, num_blocks, i, j);
        for (bj = j; bj < j + N; bj++)
        {
            for (bi = i; bi < i + N; bi++)
            {
                dst[RIDX(dim-1-bj, bi, dim)] = src[RIDX(bi, bj, dim)];
            }
        }

        i += N;
        if ( i >= dim ) {
            i = 0;
            j += N;
        }
    }

    //printf ("time spent: %lf \n", (double)(clock() - begin) * 1000 / CLOCKS_PER_SEC);
}

/* 
 * tiling attempt (commented out for now)
 */
char rotate_four_descr[] = "transpose and swap attempt";
void attempt_four(int dim, pixel *src, pixel *dst) 
{
    clock_t begin;

    /* Mark beginning time */
    begin = clock();

    printf("dIM %d \n", dim);

    /*
    dim = 4;

    pixel *srcTest = malloc(sizeof(pixel)*16);

    pixel *dstTest = malloc(sizeof(pixel)*16);

    int kk;
    for(kk= 0; kk<16;kk++)
    {
        srcTest[kk].red = kk;
        srcTest[kk].green = kk;
        srcTest[kk].blue = kk;

        //printf (" src[%d]: {%d,%d,%d}\n", kk, srcTest[kk].red, srcTest[kk].green, srcTest[kk].blue);

        dstTest[kk].red = 0;
        dstTest[kk].green = 0;
        dstTest[kk].blue = 0;
    }
    */

    int N = 32;
    int k, bi, bj, i = 0, j = 0;

    int num_blocks = pow(dim / N, 2);

    pixel temp;
    pixel *swapA;
    pixel *swapB;

    // Transpose in block
    for (k = 0; k < num_blocks; k++)
    {
        //printf("doing block %d of %d: i = %d , j = %d \n", k, num_blocks, i, j);
        
        for (bj = 0; bj < N; bj++)
        {
            for (bi = 0; bi < N; bi++)
            {
                swapA = &src[RIDX(i + bi, j + bj, dim)];
                swapB = &src[RIDX(j + bj, i + bi, dim)];

                temp.red = swapA->red;
                temp.green = swapA->green;
                temp.blue = swapA->blue;

                swapA->red = swapB->red;
                swapA->green = swapB->green;
                swapA->blue = swapB->blue;
                
                swapB->red = temp.red;
                swapB->green = temp.green;
                swapB->blue = temp.blue;
                //dst[RIDX(j + bj, i + bi, dim)] = src[RIDX(i + bi, j + bj, dim)];
            }
        }

        i += N;
        if ( i >= dim ) {
            i = 0;
            j += N;
        }
    }



    /*for(kk= 0; kk<16;kk++)
    {
        printf (" dst[%d]: {%d}\n", kk, dstTest[kk].red);
    }*/

    // Swap rows
    /*
    for (i = 0; i < dim / 2; i++)
    {
        for (j = 0; j < dim; j++)
        {
            //printf("doing swap i = %d , j = %d , dim-1-i = %d \n", i, j, dim-1-i);

            swapA = &dst[RIDX(i, j, dim)];
            swapB = &dst[RIDX(dim-1-i, j, dim)];

            //printf (" A: {%d}, B: {%d}\n", swapA->red, swapB->red);
            
            temp.red = swapA->red;
            temp.green = swapA->green;
            temp.blue = swapA->blue;

            swapA->red = swapB->red;
            swapA->green = swapB->green;
            swapA->blue = swapB->blue;
            
            swapB->red = temp.red;
            swapB->green = temp.green;
            swapB->blue = temp.blue;

            //printf (" Swap A: {%d}, B: {%d}\n", swapA->red, swapB->red);
        }
    }
    */

    printf ("time spent: %lf \n", (double)(clock() - begin) * 1000 / CLOCKS_PER_SEC);

    /*for(kk= 0; kk<16;kk++)
    {
        printf (" dst[%d]: {%d}\n", kk, dstTest[kk].red);
    }*/

    //exit(0);
}

/* 
 * tiling attempt (commented out for now)
 */
char rotate_five_descr[] = "transpose and swap complete matrix attempt";
void attempt_five(int dim, pixel *src, pixel *dst) 
{
    clock_t begin;

    /* Mark beginning time */
    begin = clock();

    printf("dIM %d \n", dim);
    int i, j;

    pixel temp;
    pixel *swapA;
    pixel *swapB;

    // Transpose full
    for (j = 0; j < dim; j++)
    {
        for (i = 0; i < dim; i++)
        {
            dst[RIDX(j, i, dim)] = src[RIDX(i, j, dim)];
        }
    }

    // Swap rows 
    for (i = 0; i < dim / 2; i++)
    {
        for (j = 0; j < dim; j++)
        {
            swapA = &dst[RIDX(i, j, dim)];
            swapB = &dst[RIDX(dim-1-i, j, dim)];

            temp.red = swapA->red;
            temp.green = swapA->green;
            temp.blue = swapA->blue;

            swapA->red = swapB->red;
            swapA->green = swapB->green;
            swapA->blue = swapB->blue;
            
            swapB->red = temp.red;
            swapB->green = temp.green;
            swapB->blue = temp.blue;
        }
    }

    printf ("time spent: %lf \n", (double)(clock() - begin) * 1000 / CLOCKS_PER_SEC);
}


/*********************************************************************
 * register_rotate_functions - Register all of your different versions
 *     of the rotate kernel with the driver by calling the
 *     add_rotate_function() for each test function. When you run the
 *     driver program, it will test and report the performance of each
 *     registered test function.  
 *********************************************************************/

void register_rotate_functions() 
{
    add_rotate_function(&naive_rotate, naive_rotate_descr);   
    //add_rotate_function(&rotate, rotate_descr);   

    add_rotate_function(&attempt_two, rotate_two_descr);   
    add_rotate_function(&attempt_three, rotate_three_descr);   
    //add_rotate_function(&attempt_four, rotate_four_descr);   
    //add_rotate_function(&attempt_five, rotate_five_descr);   
    //add_rotate_function(&attempt_six, rotate_six_descr);   
    //add_rotate_function(&attempt_seven, rotate_seven_descr);   
    //add_rotate_function(&attempt_eight, rotate_eight_descr);   
    //add_rotate_function(&attempt_nine, rotate_nine_descr);   
    //add_rotate_function(&attempt_ten, rotate_ten_descr);   
    //add_rotate_function(&attempt_eleven, rotate_eleven_descr);   

    /* ... Register additional rotate functions here */
}

